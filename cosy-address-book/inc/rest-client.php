<?php

/**
 * Class responsible of handling RESTful communication to CoSy Address Book API
 */
class Address_Book_Rest_Client {
	/**
	 * @string
	 */
	const CONTENT_TYPE_SUBSCRIPTION = 'application/vnd.ionos.product.integration.cosy.subscription-v1+json';

	/**
	 * Instance of Address_Book_Config
	 *
	 * @var CoSy_Address_Book_Config
	 */
	private $config;

	/**
	 * Last error generated by CoSy Address Book API
	 *
	 * @var string
	 */
	private $last_error;

	/**
	 * Creates an instance of Http_Client
	 *
	 * @param CoSy_Address_Book_Config $config instance of address Book Config to extract utility parameters
	 */
	public function __construct( CoSy_Address_Book_Config $config ) {
		$this->config = $config;
	}

	/**
	 * Retrieves subscription mapped to given api key
	 *
	 * @param string $api_key api key assigned to expected domain
	 *
	 * @return CoSy_Address_Book_Api_Response
	 */
	public function get_subscription( $api_key ) {
		$response = $this->do_request(
			'GET',
			sprintf( '%s/subscriptions', $this->config->get_api_endpoint() ),
			$api_key
		);

		if ( is_wp_error( $response ) ) {
			return new CoSy_Address_Book_Api_Response( false, $response->get_error_message() );
		}

		return $this->fetch_subscription_from_response( $response );
	}

	/**
	 * Creates a subscription api rest resource with given api key
	 *
	 * @param string $domain
	 * @param string $api_key
	 *
	 * @return bool
	 */
	public function create_subscription( $domain, $api_key ) {
		$response = $this->do_request(
			'POST',
			sprintf( '%s/subscriptions', $this->config->get_api_endpoint() ),
			$api_key,
			json_encode( [ 'domain' => $domain ] )
		);

		return $this->is_success_response( $response );
	}

	/**
	 * Updates subscription api rest resource identified by given api key with new domain value
	 *
	 * @param string $current_domain
	 * @param string $new_domain
	 * @param string $api_key
	 *
	 * @return bool
	 */
	public function update_subscription( $current_domain, $new_domain, $api_key ) {
		$response = $this->do_request(
			'PUT',
			sprintf( '%s/subscriptions/%s', $this->config->get_api_endpoint(), $current_domain ),
			$api_key,
			json_encode( [ 'domain' => $new_domain ] )
		);

		return $this->is_success_response( $response );
	}

	/**
	 * Creates a subscription contacts data api rest resource with given api key and request body data
	 *
	 * @param string $api_key
	 * @param string $request_body
	 *
	 * @return bool
	 */
	public function create_contacts( $api_key, $request_body ) {
		$response = $this->do_request(
			'POST',
			sprintf( '%s/contacts', $this->config->get_api_endpoint() ),
			$api_key,
			$request_body
		);

		return $this->is_success_response( $response );
	}

	/**
	 * Retrieves Last error generated by CoSy Address Book API
	 *
	 * @return string
	 */
	public function get_last_error() {
		return $this->last_error;
	}

	/**
	 * Creates an instance of Address_Book_Http_Response
	 *
	 * @param array $response
	 *
	 * @return CoSy_Address_Book_Http_Response
	 */
	private function create_http_response_instance( array $response ) {
		return new CoSy_Address_Book_Http_Response( $response );
	}

	/**
	 * Checks if response consecutively sent to a request is a success or error response
	 *
	 * @param WP_Error|array $response
	 *
	 * @return bool
	 */
	private function is_success_response( $response ) {
		if ( is_wp_error( $response ) ) {
			$this->last_error = $response->get_error_message();

			return false;
		} else {
			$http_response = $this->create_http_response_instance( $response );
			if ( $http_response->is_error() ) {
				$this->last_error = $http_response->get_error();

				return false;
			}

			return true;
		}
	}

	/**
	 * Retrieves expected subscription domain if found in response
	 *
	 * @param array $response
	 *
	 * @return CoSy_Address_Book_Api_Response
	 *
	 * @see GET resource config/wiremock/__files/cosy/subscription_domain_GET.json
	 */
	private function fetch_subscription_from_response( array $response ) {
		$is_success_subscription_response = false;
		$api_response_message             = null;
		$http_response                    = $this->create_http_response_instance( $response );

		if ( $http_response->is_error() ) {
			$api_response_message = $http_response->get_error();
		} else {
			$is_success_subscription_response = true;
			$subscriptions                    = json_decode( $http_response->get_body(), true );
			foreach ( $subscriptions as $subscription ) {
				if ( array_key_exists( 'domain', $subscription ) ) {
					$api_response_message = $subscription['domain'];
					break;
				}
			}
		}

		return new CoSy_Address_Book_Api_Response( $is_success_subscription_response, $api_response_message );
	}


	/**
	 * Proceeds an http request with given data
	 *
	 * @param string $method (GET|PUT|POST)
	 * @param string $request_url
	 * @param string $api_key
	 * @param string $request_body
	 *
	 * @return WP_Error|array
	 */
	private function do_request( $method, $request_url, $api_key, $request_body = null ) {
		$response      = null;
		$authorisation = sprintf( 'API-Key %s', $api_key );

		switch ( $method ) {
			case 'GET':
				$response = wp_remote_get(
					$request_url,
					array(
						'sslverify' => false,
						'headers'   => array(
							'Authorization' => $authorisation,
							'Content-Type'  => self::CONTENT_TYPE_SUBSCRIPTION
						)
					)
				);
				break;

			case 'PUT':
				$response = wp_remote_request(
					$request_url,
					array(
						'method'    => 'PUT',
						'sslverify' => false,
						'headers'   => array(
							'Authorization' => $authorisation,
							'Content-Type'  => self::CONTENT_TYPE_SUBSCRIPTION
						),
						'body'      => $request_body
					)
				);
				break;

			default:
				$response = wp_remote_post(
					$request_url,
					array(
						'sslverify' => false,
						'headers'   => array(
							'Authorization' => $authorisation,
							'Content-Type'  => self::CONTENT_TYPE_SUBSCRIPTION
						),
						'body'      => $request_body
					)
				);

		}

		return $response;
	}
}